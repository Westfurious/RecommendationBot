package service;

import model.Game;
import java.io.IOException;
import java.util.List;
import java.util.Random;

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–≥—Ä–∞–º–∏.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Telegram-–±–æ—Ç–æ–º –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
 */
public class GameService {
    private final GameBrainApiClient gameBrainApiClient;
    private final Random random;
    private final String[] randomQueries = {
            "action", "adventure", "rpg", "strategy", "shooter", "sports",
            "racing", "puzzle", "horror", "simulation", "indie", "open world",
            "fantasy", "sci-fi", "mystery", "survival", "mmo", "platformer"
    };

    public GameService() {
        this.gameBrainApiClient = new GameBrainApiClient();
        this.random = new Random();
    }

    public List<Game> searchGames(String query) {
        try {
            return gameBrainApiClient.searchGames(query);
        } catch (Exception e) {
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–≥—Ä", e);
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–≥—Ä—É –ø–æ ID
     */
    public Game getGameById(int id) {
        try {
            return gameBrainApiClient.getGameById(id);
        } catch (Exception e) {
            throw new RuntimeException("–ù–µ–≤–µ—Ä–Ω—ã–π ID: " + id, e);
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –∏–≥—Ä –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –±–æ—Ç–∞
     */
    public String handleSearchGames(String query) {
        try {
            List<Game> games = gameBrainApiClient.searchGames(query);

            if (games.isEmpty()) {
                return String.format("–ò–≥—Ä—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É \"%s\" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", query);
            }

            Game game = games.get(0); // –ë–µ—Ä—ë–º –ø–µ—Ä–≤—É—é –∏–≥—Ä—É

            StringBuilder response = new StringBuilder();
            response.append(String.format("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: \"%s\"%n%n", query));
            response.append(game.toString());

            return response.toString();

        } catch (IOException e) {
            return String.format("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–≥—Ä: %s", e.getMessage());
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Å–ª—É—á–∞–π–Ω–æ–π –∏–≥—Ä—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
     */
    public String handleRandomGame() {
        try {
            String randomQuery = randomQueries[random.nextInt(randomQueries.length)];
            List<Game> games = gameBrainApiClient.searchGames(randomQuery);

            if (games.isEmpty()) {
                return handleRandomGame(); // —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä
            }

            Game randomGame = games.get(random.nextInt(games.size()));
            return String.format("üé≤ –°–ª—É—á–∞–π–Ω–∞—è –∏–≥—Ä–∞ (–∂–∞–Ω—Ä: %s):%n%n%s",
                    randomQuery, randomGame.toString());

        } catch (IOException e) {
            return String.format("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–π –∏–≥—Ä—ã: %s", e.getMessage());
        }
    }
}