package service;

import model.Game;
import model.Platform;
import java.io.IOException;
import java.util.List;
import java.util.Random;

public class GameHandlers {
    private final GameBrainApiClient gameClient;
    private final Random random;
    private final String[] randomQueries = {
            "action", "adventure", "rpg", "strategy", "shooter", "sports",
            "racing", "puzzle", "horror", "simulation", "indie", "open world",
            "fantasy", "sci-fi", "mystery", "survival", "mmo", "platformer"
    };

    public GameHandlers() {
        this.gameClient = new GameBrainApiClient();
        this.random = new Random();
    }

    public String handleSearchGames(String query) {
        try {
            List<Game> games = gameClient.searchGames(query);

            if (games.isEmpty()) {
                return "–ò–≥—Ä—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É \"" + query + "\" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã";
            }

            StringBuilder response = new StringBuilder();
            response.append("–ù–∞–π–¥–µ–Ω–æ –∏–≥—Ä: ").append(games.size()).append("\n\n");

            for (int i = 0; i < Math.min(games.size(), 5); i++) {
                Game game = games.get(i);
                response.append(formatGameInfo(game, i + 1)).append("\n");
            }

            return response.toString();

        } catch (IOException e) {
            return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–≥—Ä: " + e.getMessage();
        }
    }

    public String handleRandomGame() {
        try {
            // –°–ª—É—á–∞–π–Ω—ã–π –∂–∞–Ω—Ä –∏–∑ —Å–ø–∏—Å–∫–∞
            String randomQuery = randomQueries[random.nextInt(randomQueries.length)];
            List<Game> games = gameClient.searchGames(randomQuery);

            // –ï—Å–ª–∏ –ø–æ —ç—Ç–æ–º—É –∂–∞–Ω—Ä—É –Ω–µ—Ç –∏–≥—Ä, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π
            if (games.isEmpty()) {
                return handleRandomGame();
            }

            Game randomGame = games.get(random.nextInt(games.size()));
            StringBuilder response = new StringBuilder();

            response.append("üé≤–°–ª—É—á–∞–π–Ω–∞—è –∏–≥—Ä–∞ (").append(randomQuery).append("):\n\n");
            response.append(formatGameInfo(randomGame, -1));

            return response.toString();

        } catch (IOException e) {
            return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–π –∏–≥—Ä—ã: " + e.getMessage();
        }
    }

    private String formatGameInfo(Game game, int number) {
        StringBuilder info = new StringBuilder();

        if (number > 0) {
            info.append(number).append(". ");
        }
        info.append("–ù–∞–∑–≤–∞–Ω–∏–µ: ").append(game.getName()).append("\n");

        // –ì–æ–¥
        if (game.getYear() > 0) {
            info.append("–ì–æ–¥: ").append(game.getYear()).append("\n");
        }

        // –ñ–∞–Ω—Ä
        if (game.getGenre() != null && !game.getGenre().isEmpty()) {
            info.append("–ñ–∞–Ω—Ä: ").append(game.getGenre()).append("\n");
        }

        // –†–µ–π—Ç–∏–Ω–≥
        if (game.getRating() != null && game.getRating().getMean() > 0) {
            info.append("–†–µ–π—Ç–∏–Ω–≥: ").append(String.format("%.1f", game.getRating().getMean())).append("\n");
        }

        // –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã
        if (game.getPlatforms() != null && !game.getPlatforms().isEmpty()) {
            String platforms = game.getPlatforms().stream()
                    .map(Platform::getName)
                    .reduce((a, b) -> a + ", " + b)
                    .orElse("");
            info.append("–ü–ª–∞—Ç—Ñ–æ—Ä–º—ã: ").append(platforms).append("\n");
        }

        // –û–ø–∏—Å–∞–Ω–∏–µ
        if (game.getShortDescription() != null && !game.getShortDescription().isEmpty()) {
            String desc = game.getShortDescription().length() > 100 ?
                    game.getShortDescription().substring(0, 100) + "..." : game.getShortDescription();
            info.append("–û–ø–∏—Å–∞–Ω–∏–µ: ").append(desc).append("\n");
        }

        return info.toString();
    }
}